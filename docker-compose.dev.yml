version: "3"

services:
  frontend:
    build:
      context: ./peerprep_fe
      dockerfile: Dockerfile.dev
    volumes:
      - ./peerprep_fe:/app
      - /app/node_modules
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT}
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - GATEWAY_SERVICE_ROUTE=gateway-service
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}

  gateway-service:
    build:
      context: ./gateway_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./gateway_service:/app
      - /app/node_modules
    environment:
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
      - QUESTION_SERVICE_PORT=${QUESTION_SERVICE_PORT}
      - MATCHING_SERVICE_PORT=${MATCHING_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_ROUTE=user-service
      - QUESTION_SERVICE_ROUTE=question-service
      - MATCHING_SERVICE_ROUTE=matching-service
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}

  user-service:
    build:
      context: ./users_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./users_service:/app
      - /app/node_modules # This prevents the host's node_modules from overwriting the container's
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - ${USER_SERVICE_PORT}:${USER_SERVICE_PORT}

  question-service:
    build:
      context: ./question_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./question_service:/app
      - /app/node_modules # This prevents the host's node_modules from overwriting the container's
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - QUESTION_SERVICE_PORT=${QUESTION_SERVICE_PORT}
    ports:
      - ${QUESTION_SERVICE_PORT}:${QUESTION_SERVICE_PORT}

  matching-service:
    build:
      context: ./matching_service
      dockerfile: Dockerfile.dev
    volumes:
      - ./matching_service:/app
      - /app/node_modules # This prevents the host's node_modules from overwriting the container's
    environment:
      - MATCHING_SERVICE_PORT=${MATCHING_SERVICE_PORT}
      - USER_SERVICE_PORT=${USER_SERVICE_PORT}
      - QUESTION_SERVICE_PORT=${QUESTION_SERVICE_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - GATEWAY_SERVICE_ROUTE=gateway-service
      - API_GATEWAY_PORT=${API_GATEWAY_PORT}
    ports:
      - ${MATCHING_SERVICE_PORT}:${MATCHING_SERVICE_PORT}

  kafka_service:
    image: apache/kafka:latest
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker, controller
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA_BROKER_ROUTE}:${KAFKA_BROKER_PORT},CONTROLLER://${KAFKA_BROKER_ROUTE}:${KAFKA_CONTROLLER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${KAFKA_BROKER_ROUTE}:${KAFKA_BROKER_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@${KAFKA_BROKER_ROUTE}:${KAFKA_CONTROLLER_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
    ports:
      - "${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}"
